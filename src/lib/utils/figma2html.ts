export const setupFigma2Html = (nodeId: string) => { (t => { if (!("querySelector" in document)) return; const e = t => { const e = t.getAttribute("data-src"); e && t.getAttribute("src") != e && t.setAttribute("src", e) }, i = t => { t.reduce(((t, e) => t || e.isIntersecting), !1) && (c = !1, r()) }, s = (t, e) => e ? Array.prototype.slice.call(e.querySelectorAll(t)) : [], r = () => { const t = s(`.${o}artboard:where([data-min-width],[data-max-width])`, a), n = Math.min(Math.round(a.offsetWidth), window.innerWidth); t.forEach((function(t) { const i = t.getAttribute("data-min-width"), r = t.getAttribute("data-max-width"); +i <= n && (+r >= n || null === r) ? (c || s(`.${o}f2h-img`, t).forEach(e), t.style.display = "block") : t.style.display = "none" })), c && !l && ((t => { const e = t.getBoundingClientRect(); return e.top < window.innerHeight && e.bottom > 0 })(a) ? (c = !1, r()) : (l = new IntersectionObserver(i, { rootMargin: "400px 400px" }), l.observe(a))) }, a = document.getElementById(t), n = ((t, e) => { let i = null, s = 0; const r = () => { s = Date.now(), i = null, t() }; return function() { const t = e - (Date.now() - s); t <= 0 || t > e ? (clearTimeout(i), r()) : i || (i = setTimeout(r, t)) } })(r, 200), o = ""; let l, c = !!window.IntersectionObserver; r(), document.addEventListener("DOMContentLoaded", r), window.addEventListener("resize", n) })(nodeId, { namespace: '', setup: window.setupInteractive || window.getComponent }) };
